apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion "Google Inc.:Google APIs:23"
    buildToolsVersion "23.0.2"

    compileOptions.encoding = 'ISO-8859-1'


    String proguardFile = 'proguard-rules.pro';

    defaultConfig {
        setProperty("archivesBaseName", ARTIFACT_FILE_NAME)

        minSdkVersion 15
        targetSdkVersion 23

        consumerProguardFiles proguardFile
    }
    // This scope is temporary hack for IMA (com.google.ads.interactivemedia.v3:interactivemedia) because of duplicate xml.
    packagingOptions
    {
        exclude 'jsr305_annotations/Jsr305_annotations.gwt.xml'
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), proguardFile
        }
        modular {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), proguardFile
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), proguardFile
        }
    }

    lintOptions {
        abortOnError false
    }

    publishNonDefault true
    testOptions{
        unitTests.all {
            jvmArgs '-noverify'
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        credentials{

        }
        url 'https://dl.bintray.com/applicaster-ltd/maven'
    }
    maven {
        url 'http://maven.7factory.de:8081/nexus/content/repositories/releases/'
        credentials {
            username System.getenv("MAVEN_USERNAME")
            password System.getenv("MAVEN_PASSWORD")
        }
    }
}

//SDK Manager
buildscript {
    repositories {
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.github.JakeWharton:sdk-manager-plugin:1d29782dd6ffa18880c8cbada748fb3dea45e7be'
    }
}


dependencies {
    // Applicaster SDK
    def applicasterSDKPath = 'com.applicaster:applicaster-android-sdk:2.+'

    // Check if an open SDK is defined - if not use the closed one.
    def devSDK = findProject(':applicaster-android-sdk')
    if(devSDK != null){
        compile project(path: ':applicaster-android-sdk', configuration: 'modular')
    }
    else{
        compile (applicasterSDKPath)
    }
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.google.firebase:firebase-core:10.0.1'
    testCompile 'org.robolectric:robolectric:3.1'
    testCompile 'junit:junit:4.12'
    compile fileTree(include: '**/*.jar', dir: 'libs')
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--abbrev=0', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId GROUP
            version getVersionName()
            artifactId ARTIFACT_ID
            artifact "build/outputs/aar/"+ARTIFACT_FILE_NAME+"-release.aar"
            artifact androidJavadocsJar
            artifact androidSourcesJar
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', ARTIFACT_ID)
                root.appendNode('description', POM_DESCRIPTION)
                root.appendNode('url', POM_URL)

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', ISSUE_URL)

                def scm = root.appendNode('scm')
                scm.appendNode('url', POM_SCM_URL)
                scm.appendNode('connection', POM_SCM_CONNECTION)
                scm.appendNode('developerConnection', POM_SCM_DEV_CONNECTION)

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', POM_LICENCE_NAME)
                license.appendNode('url', POM_LICENCE_URL)
                license.appendNode('distribution', POM_LICENCE_DIST)

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', POM_DEVELOPER_ID)
                developer.appendNode('name', POM_DEVELOPER_NAME)
                developer.appendNode('email', POM_DEVELOPER_EMAIL)

                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    if (!it.name.is('unspecified')) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

def getBintrayUserProperty() {
    return System.getenv("BINTRAY_USER")
}

def getBintrayApiKeyProperty() {
    return System.getenv("BINTRAY_API_KEY")
}

bintray {
    user = bintrayUserProperty
    key = bintrayApiKeyProperty
    publications = ['mavenJava']

    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = ARTIFACT_ID
        userOrg = 'applicaster-ltd'
        websiteUrl = POM_URL
        issueTrackerUrl = ISSUE_URL
        vcsUrl = POM_SCM_URL
        licenses = ['Apache-2.0']
        labels = ['aar', 'android']
        version{
            name = getVersionName()
            vcsTag = 'v'+getVersionName()
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task androidJar(type: Jar) {
    from 'build/intermediates/classes/release'
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
    archives androidJar
}
